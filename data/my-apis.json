{
	"statusCode": "200",
	"openApiList": [
		{
			"info": {
				"title": "Partner API",
				"contact": {
					"email": "support@aske-futurskill.com"
				},
				"version": "1.0.2",
				"description": "This is the model of the partner API"
			},
			"paths": {
				"/reports": {
					"get": {
						"tags": ["reports"],
						"summary": "Get the specified report",
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/report"
										}
									}
								},
								"description": "report found"
							},
							"401": {
								"content": {
									"application/json": {}
								},
								"description": "Unauthorized"
							},
							"404": {
								"content": {
									"appplication/json": {}
								},
								"description": "report not found"
							},
							"500": {
								"content": {
									"appplication/json": {}
								},
								"description": "Server error occurred"
							}
						},
						"parameters": [
							{
								"in": "query",
								"name": "testId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"example": 123456,
								"required": true,
								"description": "Id of the test associate to the report to return"
								},
							{
								"in": "query",
								"name": "candidateId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"example": 123456,
								"required": true,
								"description": "Id of the candidate associate to the report to return"
								},
							{
								"in": "query",
								"name": "reportId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"example": 123456,
								"required": false,
								"description": "Id of the specific report to return (in case of mutliple reports for a test)"
								},
							{
								"in": "query",
								"name": "language",
								"schema": {
									"type": "string"
								},
								"example": "fr-FR",
								"required": false,
								"description": "Language of the report to return (fr-FR by default)"
								},
							{
								"in": "query",
								"name": "format",
								"schema": {
									"$ref": "#/components/schemas/reportFormat"
								},
								"required": false,
								"description": "Format of the report to return"
							}
						],
						"description": "Query the database for the specified testId and candidateId and return the report.",
						"operationId": "getReport"
					}
				},
				"/candidates": {
					"post": {
						"tags": ["candidates"],
						"summary": "create a new candidate",
						"responses": {
							"201": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/candidate"
										}
									}
								},
								"description": "candidate created successfully"
							},
							"401": {
								"content": {
									"application/json": {}
								},
								"description": "Unauthorized"
							},
							"422": {
								"content": {
									"appplication/json": {}
								},
								"description": "Input could not be parsed"
							},
							"500": {
								"content": {
									"appplication/json": {}
								},
								"description": "Server error occurred"
							}
						},
						"description": "Creates a new candidate",
						"operationId": "createCandidate",
						"requestBody": {
							"content": {
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/candidate"
									}
								}
							},
							"description": "Candidate to add"
						}
					}
				},
				"/testResults": {
					"get": {
						"tags": ["testResults"],
						"summary": "Get the specified test Results",
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/testResult"
										}
									}
								},
								"description": "test results found"
							},
							"401": {
								"content": {
									"application/json": {}
								},
								"description": "Unauthorized"
							},
							"404": {
								"content": {
									"appplication/json": {}
								},
								"description": "test results not found"
							},
							"500": {
								"content": {
									"appplication/json": {}
								},
								"description": "Server error occurred"
							}
						},
						"parameters": [
							{
								"in": "query",
								"name": "testId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"example": 123456,
								"required": true,
								"description": "Id of the test associate to the test results to return"
							},
							{
								"in": "query",
								"name": "candidateId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"example": 123456,
								"required": true,
								"description": "Id of the candidate associate to the test results to return"
							}
						],
						"description": "Query the database for the specified testId and candidateId and return the associated test results.",
						"operationId": "getTestResults"
					},
					"post": {
						"tags": ["testResults"],
						"summary": "create a new test result",
						"responses": {
							"201": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/testResult"
										}
									}
								},
								"description": "test result created successfully"
							},
							"401": {
								"content": {
									"application/json": {}
								},
								"description": "Unauthorized"
							},
							"409": {
								"content": {
									"appplication/json": {}
								},
								"description": "test result already exists"
							},
							"422": {
								"content": {
									"appplication/json": {}
								},
								"description": "Input could not be parsed"
							},
							"500": {
								"content": {
									"appplication/json": {}
								},
								"description": "Server error occurred"
							}
						},
						"description": "Creates a new test result",
						"operationId": "createTestResult",
						"requestBody": {
							"content": {
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/testResult"
									}
								}
							},
							"description": "result to add"
						}
					}
				},
				"/registrations": {
					"get": {
						"tags": ["registrations"],
						"summary": "Get the specified registration",
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/registration"
										}
									}
								},
								"description": "registration found"
							},
							"401": {
								"content": {
									"application/json": {}
								},
								"description": "Unauthorized"
							},
							"404": {
								"content": {
									"appplication/json": {}
								},
								"description": "registration not found"
							},
							"500": {
								"content": {
									"appplication/json": {}
								},
								"description": "Server error occurred"
							}
						},
						"parameters": [
							{
								"in": "query",
								"name": "testId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"example": 123456,
								"required": true,
								"description": "Id of the test associate to the registration to return"
							},
							{
								"in": "query",
								"name": "candidateId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"example": 123456,
								"required": true,
								"description": "Id of the candidate associate to the registration to return"
							}
						],
						"description": "Query the database for the specified testId and candidateId and return the associated registration.",
						"operationId": "getRegistration"
					},
					"post": {
						"tags": ["registrations"],
						"summary": "create a new registration",
						"responses": {
							"201": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/registration"
										}
									}
								},
								"description": "registration created successfully"
							},
							"401": {
								"content": {
									"application/json": {}
								},
								"description": "Unauthorized"
							},
							"409": {
								"content": {
									"appplication/json": {}
								},
								"description": "registration already exists"
							},
							"422": {
								"content": {
									"appplication/json": {}
								},
								"description": "Input could not be parsed"
							},
							"500": {
								"content": {
									"appplication/json": {}
								},
								"description": "Server error occurred"
							}
						},
						"description": "Creates a new registration",
						"operationId": "createRegistration",
						"requestBody": {
							"content": {
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/registration"
									}
								}
							},
							"description": "registration to add"
						}
					}
				},
				"/authentication": {
					"get": {
						"tags": ["authentication"],
						"summary": "Get a Web Token from a clientId and a password.",
						"security": [],
						"responses": {
							"201": {
								"content": {
									"application/json": {
										"schema": {
											"type": "object",
											"properties": {
												"token": {
													"type": "string"
												}
											}
										}
									}
								},
								"description": "Token created"
							},
							"401": {
								"content": {
									"application/json": {}
								},
								"description": "Unauthorized"
							},
							"500": {
								"content": {
									"appplication/json": {}
								},
								"description": "Server error occurred"
							}
						},
						"parameters": [
							{
								"in": "query",
								"name": "clientId",
								"schema": {
									"type": "string"
								},
								"example": "ASkE",
								"required": true,
								"description": "Id of the client"
							},
							{
								"in": "query",
								"name": "password",
								"schema": {
									"type": "string"
								},
								"example": "secretpassword",
								"required": true,
								"description": "Password of the client"
							}
						],
						"description": "Validates the provided username and password. If validation is sucessful, returns a Web Token to be used for subsequent calls.",
						"operationId": "getAuthentication"
					}
				},
				"/candidates/{candidateId}": {
					"get": {
						"tags": ["candidates"],
						"summary": "Get the specified candidate",
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/candidate"
										}
									}
								},
								"description": "candidate found"
							},
							"401": {
								"content": {
									"application/json": {}
								},
								"description": "Unauthorized"
							},
							"404": {
								"content": {
									"appplication/json": {}
								},
								"description": "candidate not found"
							},
							"500": {
								"content": {
									"appplication/json": {}
								},
								"description": "Server error occurred"
							}
						},
						"parameters": [
							{
								"in": "path",
								"name": "candidateId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"example": 123456,
								"required": true,
								"description": "Id of the candidate to return"
							}
						],
						"description": "Query the database for the specified candidateId and return the associated candidate.",
						"operationId": "getCandidate"
					},
					"put": {
						"tags": ["candidates"],
						"summary": "Update specified candidate",
						"responses": {
							"205": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/candidate"
										}
									}
								},
								"description": "candidate updated successfully"
							},
							"401": {
								"content": {
									"application/json": {}
								},
								"description": "Unauthorized"
							},
							"404": {
								"content": {
									"appplication/json": {}
								},
								"description": "candidate not found"
							},
							"422": {
								"content": {
									"appplication/json": {}
								},
								"description": "Input could not be parsed"
							},
							"500": {
								"content": {
									"appplication/json": {}
								},
								"description": "Server error occurred"
							}
						},
						"parameters": [
							{
								"in": "path",
								"name": "candidateId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"example": 123456,
								"required": true,
								"description": "Id of the person object to update"
							}
						],
						"description": "Query the database for the specified pandidate object and update it with the provided data",
						"operationId": "updateCandidate",
						"requestBody": {
							"content": {
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/candidate"
									}
								}
							}
						}
					},
					"delete": {
						"tags": ["candidates"],
						"summary": "Remove the candidate object",
						"responses": {
							"204": {
								"content": {
									"application/json": {}
								},
								"description": "candidate removed"
							},
							"401": {
								"content": {
									"application/json": {}
								},
								"description": "Unauthorized"
							},
							"404": {
								"content": {
									"appplication/json": {}
								},
								"description": "candidate not found"
							},
							"500": {
								"content": {
									"appplication/json": {}
								},
								"description": "Server error occurred"
							}
						},
						"parameters": [
							{
								"in": "path",
								"name": "candidateId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"example": 123456,
								"required": true,
								"description": "Id of the candidate to return"
							}
						],
						"description": "Query the database for the specified candidateId and remove it.",
						"operationId": "deleteCandidate"
					}
				}
			},
			"openapi": "3.0.0",
			"servers": [
				{
					"url": "https://virtserver.swaggerhub.com/Aske-FuturSkill/PartnerAPI/1.0",
					"description": "SwaggerHub API Auto Mocking"
				},
				{
					"url": "https://partner.api.host.com/api/1.0/"
				}
			],
			"security": [
				{
				"bearerAuth": []
				}
			],
			"components": {
				"schemas": {
					"score": {
						"type": "number",
						"format": "float",
						"maximum": 1,
						"minimum": -1
					},
					"report": {
						"type": "object",
						"properties": {
							"value": {
								"type": "string"
							},
							"format": {
								"$ref": "#/components/schemas/reportFormat"
							},
							"testId": {
								"type": "integer",
								"format": "int64",
								"example": 1234567890
							},
							"language": {
								"type": "string",
								"example": "fr-FR"
							},
							"reportId": {
								"type": "integer",
								"format": "int64",
								"example": 1234567890,
								"nullable": true
							},
							"candidateId": {
								"type": "integer",
								"format": "int64",
								"example": 1234567890
							}
						}
					},
					"result": {
						"type": "object",
						"properties": {
							"id": {
								"type": "integer",
								"format": "int64"
							},
							"name": {
								"type": "string"
							},
							"score": {
								"$ref": "#/components/schemas/score"
							},
							"feedback": {
								"type": "string"
							}
						}
					},
					"status": {
						"enum": ["1", "2", "3"],
						"type": "string",
						"description": "1: notStarted, 2: inProgress, 3: finished"
					},
					"candidate": {
						"type": "object",
						"properties": {
							"id": {
								"type": "integer",
								"format": "int64",
								"example": 1234567890
							},
							"tests": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"status": {
											"$ref": "#/components/schemas/status"
										},
										"testId": {
											"type": "integer",
											"format": "int64",
											"example": 1234567890
										}
									}
								},
								"uniqueItems": false
							},
							"gender": {
								"enum": ["1", "2"],
								"type": "string",
								"example": "1",
								"description": "1 for Male, 2 for Female"
							},
							"language": {
								"type": "string",
								"example": "fr-FR"
							},
							"lastName": {
								"type": "string",
								"example": "Dupont"
							},
							"firstName": {
								"type": "string",
								"example": "Jean"
							}
						}
					},
					"testResult": {
						"type": "object",
						"properties": {
							"testId": {
								"type": "integer",
								"format": "int64",
								"example": 1234567890
							},
							"endDate": {
								"type": "string",
								"format": "date-time"
							},
							"language": {
								"type": "string",
								"example": "fr-FR"
							},
							"startDate": {
								"type": "string",
								"format": "date-time"
							},
							"candidateId": {
								"type": "integer",
								"format": "int64",
								"example": 1234567890
							},
							"elapsedTime": {
								"type": "string"
							},
							"globalscore": {
								"$ref": "#/components/schemas/score"
							},
							"skillsResult": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/result"
								}
							},
							"elementResult": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/result"
								}
							},
							"askeAccesToken": {
								"type": "string",
								"example": "db6366ed-1ec6-4bb2-9f02-b9947f794584"
							}
						}
					},
					"registration": {
						"type": "object",
						"properties": {
							"url": {
								"type": "string",
								"example": "https://partner.host.com/test/1234567890/run/123465789/fr-FR"
							},
							"status": {
								"$ref": "#/components/schemas/status"
							},
							"testId": {
								"type": "integer",
								"format": "int64",
								"example": 1234567890
							},
							"callback": {
								"type": "string",
								"example": "http://aske-futurskill.com/portal/public/api/results"
							},
							"language": {
								"type": "string",
								"example": "fr-FR"
							},
							"redirect": {
								"type": "string",
								"example": ""
							},
							"candidateId": {
								"type": "integer",
								"format": "int64",
								"example": 1234567890
							},
							"askeAccessToken": {
								"type": "string",
								"example": "db6366ed-1ec6-4bb2-9f02-b9947f794584"
							},
							"registrationDate": {
								"type": "string",
								"format": "date-time"
							}
						}
					},
					"reportFormat": {
						"enum": ["1", "2", "3", "4", "5"],
						"type": "string",
						"description": "1: URL, 2: PDF, 3: HTML, 4: Document, 5: Table"
					}
				},
				"securitySchemes": {
					"bearerAuth": {
						"type": "http",
						"scheme": "bearer",
						"bearerFormat": "JSONWebToken"
					}
				}
			},
			"x-abyss-platform": {
				"uuid": "16f2437c-1914-418b-a390-a59b88b63ed4",
				"organization_id": 0,
				"created": "2018-03-02T13:01:39.082502",
				"updated": "2018-05-02T13:01:39.082502",
				"deleted": null,
				"isdeleted": 0,
				"crud_subject_id": 1,
				"subject_id": 501,
				"isproxyapi": false,
				"apistateid": 4,
				"apivisibilityid": 1,
				"languagename": "OpenAPI",
				"languageversion": "3.0.0",
				"dataformat": 1,
				"businessapiid": null,
				"image": null,
				"color": null,
				"deployed": null,
				"changelog": null,
				"tags": null,
				"groups": [
					{
						"uuid": "254dc26b-2a6d-4cd1-908d-4b170e8fb08c",
						"name": "Examples"
					}
				],
				"categories": null,
				"proxies_summary": [
					{
						"uuid": "65bd3e20-ff9c-4570-87c2-61e5447f3d5d",
						"name": "My Proxy 1",
						"context": "my_proxy_1"
					},
					{
						"uuid": "9b2858f0-6963-4d7c-91d7-e1e64ac24a22",
						"name": "My Proxy 2",
						"context": "my_proxy_2"
					}
				]
			}
		},
		{
			"info": {
				"title": "Swagger Petstore",
				"contact": {
					"email": "apiteam@swagger.io"
				},
				"license": {
					"url": "http://www.apache.org/licenses/LICENSE-2.0.html",
					"name": "Apache 2.0"
				},
				"version": "1.0.0",
				"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
				"termsOfService": "http://swagger.io/terms/"
			},
			"tags": [
				{
					"name": "pet",
					"description": "Everything about your Pets",
					"externalDocs": {
						"url": "http://swagger.io",
						"description": "Find out more"
					}
				},
				{
					"name": "store",
					"description": "Access to Petstore orders"
				},
				{
					"name": "user",
					"description": "Operations about user",
					"externalDocs": {
						"url": "http://swagger.io",
						"description": "Find out more about our store"
					}
				}
			],
			"paths": {
				"/pet": {
					"put": {
						"tags": ["pet"],
						"summary": "Update an existing pet",
						"security": [
							{
								"petstore_auth": ["write:pets",
								"read:pets"]
							}
						],
						"responses": {
							"400": {
								"description": "Invalid ID supplied"
							},
							"404": {
								"description": "Pet not found"
							},
							"405": {
								"description": "Validation exception"
							}
						},
						"parameters": [],
						"description": "",
						"operationId": "updatePet",
						"requestBody": {
							"$ref": "#/components/requestBodies/Pet"
						}
					},
					"post": {
						"tags": ["pet"],
						"summary": "Add a new pet to the store",
						"security": [
							{
								"petstore_auth": ["write:pets",
								"read:pets"]
							}
						],
						"responses": {
							"405": {
								"description": "Invalid input"
							}
						},
						"parameters": [],
						"description": "",
						"operationId": "addPet",
						"requestBody": {
							"$ref": "#/components/requestBodies/Pet"
						}
					}
				},
				"/user": {
					"post": {
						"tags": ["user"],
						"summary": "Create user",
						"responses": {
							"default": {
								"description": "successful operation"
							}
						},
						"parameters": [],
						"description": "This can only be done by the logged in user.",
						"operationId": "createUser",
						"requestBody": {
							"content": {
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/User"
									}
								}
							},
							"description": "Created user object"
						}
					}
				},
				"/user/login": {
					"get": {
						"tags": ["user"],
						"summary": "Logs user into the system",
						"responses": {
							"200": {
								"content": {
									"application/xml": {
										"schema": {
											"type": "string"
										}
									},
									"application/json": {
										"schema": {
											"type": "string"
										}
									}
								},
								"headers": {
									"X-Rate-Limit": {
										"schema": {
											"type": "integer",
											"format": "int32"
										},
										"description": "calls per hour allowed by the user"
									},
									"X-Expires-After": {
										"schema": {
											"type": "string",
											"format": "date-time"
										},
										"description": "date in UTC when token expires"
									}
								},
								"description": "successful operation"
							},
							"400": {
								"description": "Invalid username/password supplied"
							}
						},
						"parameters": [
							{
								"in": "query",
								"name": "username",
								"schema": {
									"type": "string"
								},
								"required": true,
								"description": "The user name for login"
							},
							{
								"in": "query",
								"name": "password",
								"schema": {
									"type": "string"
								},
								"required": true,
								"description": "The password for login in clear text"
							}
						],
						"description": "",
						"operationId": "loginUser"
					}
				},
				"/pet/{petId}": {
					"get": {
						"tags": ["pet"],
						"summary": "Find pet by ID",
						"security": [
							{
								"api_key": []
							}
						],
						"responses": {
							"200": {
								"content": {
									"application/xml": {
										"schema": {
											"$ref": "#/components/schemas/Pet"
										}
									},
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/Pet"
										}
									}
								},
								"description": "successful operation"
							},
							"400": {
								"description": "Invalid ID supplied"
							},
							"404": {
								"description": "Pet not found"
							}
						},
						"parameters": [
							{
								"in": "path",
								"name": "petId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"required": true,
								"description": "ID of pet to return"
							}
						],
						"description": "Returns a single pet",
						"operationId": "getPetById"
					},
					"post": {
						"tags": ["pet"],
						"summary": "Updates a pet in the store with form data",
						"security": [
							{
								"petstore_auth": ["write:pets",
								"read:pets"]
							}
						],
						"responses": {
							"405": {
								"description": "Invalid input"
							}
						},
						"parameters": [
							{
								"in": "path",
								"name": "petId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"required": true,
								"description": "ID of pet that needs to be updated"
							}
						],
						"description": "",
						"operationId": "updatePetWithForm",
						"requestBody": {
							"content": {
								"application/x-www-form-urlencoded": {
									"schema": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string"
											},
											"status": {
												"type": "string"
											}
										}
									}
								}
							},
							"description": "Updated name of the pet"
						}
					},
					"delete": {
						"tags": ["pet"],
						"summary": "Deletes a pet",
						"security": [
							{
								"petstore_auth": ["write:pets",
								"read:pets"]
							}
						],
						"responses": {
							"400": {
								"description": "Invalid ID supplied"
							},
							"404": {
								"description": "Pet not found"
							}
						},
						"parameters": [
							{
								"in": "header",
								"name": "api_key",
								"schema": {
									"type": "string"
								},
								"required": false
							},
							{
								"in": "path",
								"name": "petId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"required": true,
								"description": "Pet id to delete"
							}
						],
						"description": "",
						"operationId": "deletePet"
					}
				},
				"/store/order": {
					"post": {
						"tags": ["store"],
						"summary": "Place an order for a pet",
						"responses": {
							"200": {
								"content": {
									"application/xml": {
										"schema": {
											"$ref": "#/components/schemas/Order"
										}
									},
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/Order"
										}
									}
								},
								"description": "successful operation"
							},
							"400": {
								"description": "Invalid Order"
							}
						},
						"parameters": [],
						"description": "",
						"operationId": "placeOrder",
						"requestBody": {
							"content": {
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/Order"
									}
								}
							},
							"description": "order placed for purchasing the pet"
						}
					}
				},
				"/user/logout": {
					"get": {
						"tags": ["user"],
						"summary": "Logs out current logged in user session",
						"responses": {
							"default": {
								"description": "successful operation"
							}
						},
						"parameters": [],
						"description": "",
						"operationId": "logoutUser"
					}
				},
				"/pet/findByTags": {
					"get": {
						"tags": ["pet"],
						"summary": "Finds Pets by tags",
						"security": [
							{
								"petstore_auth": ["write:pets",
								"read:pets"]
							}
						],
						"responses": {
							"200": {
								"content": {
									"application/xml": {
										"schema": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/Pet"
											}
										}
									},
									"application/json": {
										"schema": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/Pet"
											}
										}
									}
								},
								"description": "successful operation"
							},
							"400": {
								"description": "Invalid tag value"
							}
						},
						"deprecated": true,
						"parameters": [
							{
								"in": "query",
								"name": "tags",
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"explode": true,
								"required": true,
								"description": "Tags to filter by"
							}
						],
						"description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
						"operationId": "findPetsByTags"
					}
				},
				"/store/inventory": {
					"get": {
						"tags": ["store"],
						"summary": "Returns pet inventories by status",
						"security": [
							{
								"api_key": []
							}
						],
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"schema": {
											"type": "object",
											"additionalProperties": {
												"type": "integer",
												"format": "int32"
											}
										}
									}
								},
								"description": "successful operation"
							}
						},
						"parameters": [],
						"description": "Returns a map of status codes to quantities",
						"operationId": "getInventory"
					}
				},
				"/user/{username}": {
					"get": {
						"tags": ["user"],
						"summary": "Get user by user name",
						"responses": {
							"200": {
								"content": {
									"application/xml": {
										"schema": {
											"$ref": "#/components/schemas/User"
										}
									},
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/User"
										}
									}
								},
								"description": "successful operation"
							},
							"400": {
								"description": "Invalid username supplied"
							},
							"404": {
								"description": "User not found"
							}
						},
						"parameters": [
							{
								"in": "path",
								"name": "username",
								"schema": {
									"type": "string"
								},
								"required": true,
								"description": "The name that needs to be fetched. Use user1 for testing. "
							}
						],
						"description": "",
						"operationId": "getUserByName"
					},
					"put": {
						"tags": ["user"],
						"summary": "Updated user",
						"responses": {
							"400": {
								"description": "Invalid user supplied"
							},
							"404": {
								"description": "User not found"
							}
						},
						"parameters": [
							{
								"in": "path",
								"name": "username",
								"schema": {
									"type": "string"
								},
								"required": true,
								"description": "name that need to be updated"
							}
						],
						"description": "This can only be done by the logged in user.",
						"operationId": "updateUser",
						"requestBody": {
							"content": {
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/User"
									}
								}
							},
							"description": "Updated user object"
						}
					},
					"delete": {
						"tags": ["user"],
						"summary": "Delete user",
						"responses": {
							"400": {
								"description": "Invalid username supplied"
							},
							"404": {
								"description": "User not found"
							}
						},
						"parameters": [
							{
								"in": "path",
								"name": "username",
								"schema": {
									"type": "string"
								},
								"required": true,
								"description": "The name that needs to be deleted"
							}
						],
						"description": "This can only be done by the logged in user.",
						"operationId": "deleteUser"
					}
				},
				"/pet/findByStatus": {
					"get": {
						"tags": ["pet"],
						"summary": "Finds Pets by status",
						"security": [
							{
								"petstore_auth": ["write:pets",
								"read:pets"]
							}
						],
						"responses": {
							"200": {
								"content": {
									"application/xml": {
										"schema": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/Pet"
											}
										}
									},
									"application/json": {
										"schema": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/Pet"
											}
										}
									}
								},
								"description": "successful operation"
							},
							"400": {
								"description": "Invalid status value"
							}
						},
						"parameters": [
							{
								"in": "query",
								"name": "status",
								"schema": {
									"type": "array",
									"items": {
										"enum": ["available",
										"pending",
										"sold"],
										"type": "string",
										"default": "available"
									}
								},
								"explode": true,
								"required": true,
								"description": "Status values that need to be considered for filter"
							}
						],
						"description": "Multiple status values can be provided with comma separated strings",
						"operationId": "findPetsByStatus"
					}
				},
				"/user/createWithList": {
					"post": {
						"tags": ["user"],
						"summary": "Creates list of users with given input array",
						"responses": {
							"default": {
								"description": "successful operation"
							}
						},
						"parameters": [],
						"description": "",
						"operationId": "createUsersWithListInput",
						"requestBody": {
							"$ref": "#/components/requestBodies/UserArray"
						}
					}
				},
				"/user/createWithArray": {
					"post": {
						"tags": ["user"],
						"summary": "Creates list of users with given input array",
						"responses": {
							"default": {
								"description": "successful operation"
							}
						},
						"parameters": [],
						"description": "",
						"operationId": "createUsersWithArrayInput",
						"requestBody": {
							"$ref": "#/components/requestBodies/UserArray"
						}
					}
				},
				"/store/order/{orderId}": {
					"get": {
						"tags": ["store"],
						"summary": "Find purchase order by ID",
						"responses": {
							"200": {
								"content": {
									"application/xml": {
										"schema": {
											"$ref": "#/components/schemas/Order"
										}
									},
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/Order"
										}
									}
								},
								"description": "successful operation"
							},
							"400": {
								"description": "Invalid ID supplied"
							},
							"404": {
								"description": "Order not found"
							}
						},
						"parameters": [
							{
								"in": "path",
								"name": "orderId",
								"schema": {
									"type": "integer",
									"format": "int64",
									"maximum": 10,
									"minimum": 1
								},
								"required": true,
								"description": "ID of pet that needs to be fetched"
							}
						],
						"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
						"operationId": "getOrderById"
					},
					"delete": {
						"tags": ["store"],
						"summary": "Delete purchase order by ID",
						"responses": {
							"400": {
								"description": "Invalid ID supplied"
							},
							"404": {
								"description": "Order not found"
							}
						},
						"parameters": [
							{
								"in": "path",
								"name": "orderId",
								"schema": {
									"type": "integer",
									"format": "int64",
									"minimum": 1
								},
								"required": true,
								"description": "ID of the order that needs to be deleted"
							}
						],
						"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
						"operationId": "deleteOrder"
					}
				},
				"/pet/{petId}/uploadImage": {
					"post": {
						"tags": ["pet"],
						"summary": "uploads an image",
						"security": [
							{
								"petstore_auth": ["write:pets",
								"read:pets"]
							}
						],
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/ApiResponse"
										}
									}
								},
								"description": "successful operation"
							}
						},
						"parameters": [
							{
								"in": "path",
								"name": "petId",
								"schema": {
									"type": "integer",
									"format": "int64"
								},
								"required": true,
								"description": "ID of pet to update"
							}
						],
						"description": "",
						"operationId": "uploadFile",
						"requestBody": {
							"content": {
								"application/octet-stream": {
									"schema": {
										"type": "string",
										"format": "binary"
									}
								}
							},
							"description": "file to upload"
						}
					}
				}
			},
			"openapi": "3.0.0-RC1",
			"servers": [
				{
					"url": "http://petstore.swagger.io/v2"
				}
			],
			"x-origin": [
				{
					"url": "http://petstore.swagger.io/v2/swagger.json",
					"format": "swagger",
					"version": "2.0",
					"converter": {
						"url": "https://github.com/mermade/swagger2openapi",
						"version": "2.2.0"
					}
				}
			],
			"components": {
				"headers": {},
				"schemas": {
					"Pet": {
						"xml": {
							"name": "Pet"
						},
						"type": "object",
						"required": ["name", "photoUrls"],
						"properties": {
							"id": {
								"type": "integer",
								"format": "int64"
							},
							"name": {
								"type": "string",
								"example": "doggie"
							},
							"tags": {
								"xml": {
									"name": "tag",
									"wrapped": true
								},
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Tag"
								}
							},
							"status": {
								"enum": ["available", "pending", "sold"],
								"type": "string",
								"description": "pet status in the store"
							},
							"category": {
								"$ref": "#/components/schemas/Category"
							},
							"photoUrls": {
								"xml": {
									"name": "photoUrl",
									"wrapped": true
								},
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					},
					"Tag": {
						"xml": {
							"name": "Tag"
						},
						"type": "object",
						"properties": {
							"id": {
								"type": "integer",
								"format": "int64"
							},
							"name": {
								"type": "string"
							}
						}
					},
					"User": {
						"xml": {
							"name": "User"
						},
						"type": "object",
						"properties": {
							"id": {
								"type": "integer",
								"format": "int64"
							},
							"email": {
								"type": "string"
							},
							"phone": {
								"type": "string"
							},
							"lastName": {
								"type": "string"
							},
							"password": {
								"type": "string"
							},
							"username": {
								"type": "string"
							},
							"firstName": {
								"type": "string"
							},
							"userStatus": {
								"type": "integer",
								"format": "int32",
								"description": "User Status"
							}
						}
					},
					"Order": {
						"xml": {
							"name": "Order"
						},
						"type": "object",
						"properties": {
							"id": {
								"type": "integer",
								"format": "int64"
							},
							"petId": {
								"type": "integer",
								"format": "int64"
							},
							"status": {
								"enum": ["placed", "approved", "delivered"],
								"type": "string",
								"description": "Order Status"
							},
							"complete": {
								"type": "boolean",
								"default": false
							},
							"quantity": {
								"type": "integer",
								"format": "int32"
							},
							"shipDate": {
								"type": "string",
								"format": "date-time"
							}
						}
					},
					"Category": {
						"xml": {
							"name": "Category"
						},
						"type": "object",
						"properties": {
							"id": {
								"type": "integer",
								"format": "int64"
							},
							"name": {
								"type": "string"
							}
						}
					},
					"ApiResponse": {
						"type": "object",
						"properties": {
							"code": {
								"type": "integer",
								"format": "int32"
							},
							"type": {
								"type": "string"
							},
							"message": {
								"type": "string"
							}
						}
					}
				},
				"examples": {},
				"responses": {},
				"parameters": {},
				"requestBodies": {
					"Pet": {
						"content": {
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Pet"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pet"
								}
							}
						},
						"description": "Pet object that needs to be added to the store"
					},
					"UserArray": {
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/User"
									}
								}
							}
						},
						"description": "List of user object"
					}
				},
				"securitySchemes": {
					"api_key": {
						"in": "header",
						"name": "api_key",
						"type": "apiKey"
					},
					"petstore_auth": {
						"type": "oauth2",
						"flows": {
							"implicit": {
								"scopes": {
									"read:pets": "read your pets",
									"write:pets": "modify pets in your account"
								},
								"authorizationUrl": "http://petstore.swagger.io/oauth/dialog"
							}
						}
					}
				}
			},
			"externalDocs": {
				"url": "http://swagger.io",
				"description": "Find out more about Swagger"
			},
			"x-abyss-platform": {
				"uuid": "6d41aeef-a4e5-4b76-a1e5-dcd8fcdc35c4",
				"organization_id": 0,
				"created": "2018-05-02T13:01:39.082502",
				"updated": "2018-05-02T13:01:39.082502",
				"deleted": null,
				"isdeleted": 0,
				"crud_subject_id": 1,
				"subject_id": 501,
				"isproxyapi": false,
				"apistateid": 4,
				"apivisibilityid": 1,
				"languagename": "OpenAPI",
				"languageversion": "3.0",
				"dataformat": 0,
				"businessapiid": null,
				"image": null,
				"color": null,
				"deployed": null,
				"changelog": null,
				"tags": [
					{
						"uuid": "b0360528-3760-493a-ae8d-60bfda2c1a1f",
						"name": "pet"
					},
					{
						"uuid": "f27b3952-955d-4571-a2e3-b7a9bc2e894c",
						"name": "animals"
					}
				],
				"groups": [
					{
						"uuid": "254dc26b-2a6d-4cd1-908d-4b170e8fb08c",
						"name": "Examples"
					}
				],
				"categories": [
					{
						"uuid": "3c30a832-ff49-4e30-9bca-3da622ea4037",
						"name": "Commerce"
					}
				],
				"proxies_summary": [
					{
						"uuid": "65bd3e20-ff9c-4570-87c2-61e5447f3d5d",
						"name": "My Proxy 1",
						"context": "my_proxy_1"
					}
				]
			}
		},
		{
			"info": {
				"title": "Uber API",
				"version": "1.0.0",
				"description": "Move your app forward with the Uber API"
			},
			"paths": {
				"/me": {
					"get": {
						"tags": ["User"],
						"summary": "User Profile",
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/Profile"
										}
									}
								},
								"description": "Profile information for a user"
							},
							"default": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/Error"
										}
									}
								},
								"description": "Unexpected error"
							}
						},
						"description": "The User Profile endpoint returns information about the Uber user that has authorized with the application."
					}
				},
				"/history": {
					"get": {
						"tags": ["User"],
						"summary": "User Activity",
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/Activities"
										}
									}
								},
								"description": "History information for the given user"
							},
							"default": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/Error"
										}
									}
								},
								"description": "Unexpected error"
							}
						},
						"parameters": [
							{
								"in": "query",
								"name": "offset",
								"schema": {
									"type": "integer",
									"format": "int32"
								},
								"description": "Offset the list of returned results by this amount. Default is zero."
							},
							{
								"in": "query",
								"name": "limit",
								"schema": {
									"type": "integer",
									"format": "int32"
								},
								"description": "Number of items to retrieve. Default is 5, maximum is 100."
							}
						],
						"description": "The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will include pickup locations and times, dropoff locations and times, the distance of past requests, and information about which products were requested.<br><br>The history array in the response will have a maximum length based on the limit parameter. The response value count may exceed limit, therefore subsequent API requests may be necessary."
					}
				},
				"/products": {
					"get": {
						"tags": ["Products"],
						"summary": "Product Types",
						"security": [
							{
								"apikey": []
							}
						],
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/ProductList"
										}
									}
								},
								"description": "An array of products"
							},
							"default": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/Error"
										}
									}
								},
								"description": "Unexpected error"
							}
						},
						"parameters": [
							{
								"in": "query",
								"name": "latitude",
								"schema": {
									"type": "number",
									"format": "double"
								},
								"required": true,
								"description": "Latitude component of location."
							},
							{
								"in": "query",
								"name": "longitude",
								"schema": {
									"type": "number",
									"format": "double"
								},
								"required": true,
								"description": "Longitude component of location."
							}
						],
						"description": "The Products endpoint returns information about the Uber products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order."
					}
				},
				"/estimates/time": {
					"get": {
						"tags": ["Estimates"],
						"summary": "Time Estimates",
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"schema": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/Product"
											}
										}
									}
								},
								"description": "An array of products"
							},
							"default": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/Error"
										}
									}
								},
								"description": "Unexpected error"
							}
						},
						"parameters": [
							{
								"in": "query",
								"name": "start_latitude",
								"schema": {
									"type": "number",
									"format": "double"
								},
								"required": true,
								"description": "Latitude component of start location."
							},
							{
								"in": "query",
								"name": "start_longitude",
								"schema": {
									"type": "number",
									"format": "double"
								},
								"required": true,
								"description": "Longitude component of start location."
							},
							{
								"in": "query",
								"name": "customer_uuid",
								"schema": {
									"type": "string",
									"format": "uuid"
								},
								"description": "Unique customer identifier to be used for experience customization."
							},
							{
								"in": "query",
								"name": "product_id",
								"schema": {
									"type": "string"
								},
								"description": "Unique identifier representing a specific product for a given latitude & longitude."
							}
						],
						"description": "The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs."
					}
				},
				"/estimates/price": {
					"get": {
						"tags": ["Estimates"],
						"summary": "Price Estimates",
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"schema": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/PriceEstimate"
											}
										}
									}
								},
								"description": "An array of price estimates by product"
							},
							"default": {
								"content": {
									"application/json": {
										"schema": {
											"$ref": "#/components/schemas/Error"
										}
									}
								},
								"description": "Unexpected error"
							}
						},
						"parameters": [
							{
								"in": "query",
								"name": "start_latitude",
								"schema": {
									"type": "number",
									"format": "double"
								},
								"required": true,
								"description": "Latitude component of start location."
							},
							{
								"in": "query",
								"name": "start_longitude",
								"schema": {
									"type": "number",
									"format": "double"
								},
								"required": true,
								"description": "Longitude component of start location."
							},
							{
								"in": "query",
								"name": "end_latitude",
								"schema": {
									"type": "number",
									"format": "double"
								},
								"required": true,
								"description": "Latitude component of end location."
							},
							{
								"in": "query",
								"name": "end_longitude",
								"schema": {
									"type": "number",
									"format": "double"
								},
								"required": true,
								"description": "Longitude component of end location."
							}
						],
						"description": "The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.<br><br>The response also includes low and high estimates, and the [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for situations requiring currency conversion. When surge is active for a particular product, its surge_multiplier will be greater than 1, but the price estimate already factors in this multiplier."
					}
				}
			},
			"openapi": "3.0.0",
			"servers": [
				{
					"url": "https://api.uber.com/v1"
				}
			],
			"components": {
				"schemas": {
					"Error": {
						"properties": {
							"code": {
								"type": "integer",
								"format": "int32"
							},
							"fields": {
								"type": "string"
							},
							"message": {
								"type": "string"
							}
						}
					},
					"Product": {
						"properties": {
							"image": {
								"type": "string",
								"description": "Image URL representing the product."
							},
							"capacity": {
								"type": "integer",
								"description": "Capacity of product. For example, 4 people."
							},
							"product_id": {
								"type": "string",
								"description": "Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles."
							},
							"description": {
								"type": "string",
								"description": "Description of product."
							},
							"display_name": {
								"type": "string",
								"description": "Display name of product."
							}
						}
					},
					"Profile": {
						"properties": {
							"email": {
								"type": "string",
								"description": "Email address of the Uber user"
							},
							"picture": {
								"type": "string",
								"description": "Image URL of the Uber user."
							},
							"last_name": {
								"type": "string",
								"description": "Last name of the Uber user."
							},
							"first_name": {
								"type": "string",
								"description": "First name of the Uber user."
							},
							"promo_code": {
								"type": "string",
								"description": "Promo code of the Uber user."
							}
						}
					},
					"Activity": {
						"properties": {
							"uuid": {
								"type": "string",
								"description": "Unique identifier for the activity"
							}
						}
					},
					"Activities": {
						"properties": {
							"count": {
								"type": "integer",
								"format": "int32",
								"description": "Total number of items available."
							},
							"limit": {
								"type": "integer",
								"format": "int32",
								"description": "Number of items to retrieve (100 max)."
							},
							"offset": {
								"type": "integer",
								"format": "int32",
								"description": "Position in pagination."
							},
							"history": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Activity"
								}
							}
						}
					},
					"ProductList": {
						"properties": {
							"products": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Product"
								},
								"description": "Contains the list of products"
							}
						}
					},
					"PriceEstimate": {
						"properties": {
							"estimate": {
								"type": "string",
								"description": "Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \"Metered\" for TAXI."
							},
							"product_id": {
								"type": "string",
								"description": "Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles"
							},
							"display_name": {
								"type": "string",
								"description": "Display name of product."
							},
							"low_estimate": {
								"type": "number",
								"description": "Lower bound of the estimated price."
							},
							"currency_code": {
								"type": "string",
								"description": "[ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code."
							},
							"high_estimate": {
								"type": "number",
								"description": "Upper bound of the estimated price."
							},
							"surge_multiplier": {
								"type": "number",
								"description": "Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier."
							}
						}
					}
				},
				"securitySchemes": {
					"apikey": {
						"in": "query",
						"name": "server_token",
						"type": "apiKey"
					}
				}
			},
			"x-abyss-platform": {
				"uuid": "5b352965-9bc4-4c48-a881-323734bed307",
				"organization_id": 0,
				"created": "2018-04-02T13:01:39.082502",
				"updated": "2018-05-02T13:01:39.082502",
				"deleted": null,
				"isdeleted": 0,
				"crud_subject_id": 1,
				"subject_id": 501,
				"isproxyapi": false,
				"apistateid": 4,
				"apivisibilityid": 1,
				"languagename": "OpenAPI",
				"languageversion": "3.0.0",
				"dataformat": 1,
				"businessapiid": null,
				"image": null,
				"color": null,
				"deployed": null,
				"changelog": null,
				"tags": null,
				"groups": [
					{
						"uuid": "254dc26b-2a6d-4cd1-908d-4b170e8fb08c",
						"name": "Examples"
					}
				],
				"categories": [
					{
						"uuid": "924482c3-2e44-4337-971c-5de05a7327ed",
						"name": "Travel"
					},
					{
						"uuid": "469c735b-0c76-4596-87ff-4d0607bcae9c",
						"name": "Transportation"
					}
				],
				"proxies_summary": [
					{
						"uuid": "65bd3e20-ff9c-4570-87c2-61e5447f3d5d",
						"name": "My Proxy 1",
						"context": "my_proxy_1"
					},
					{
						"uuid": "9b2858f0-6963-4d7c-91d7-e1e64ac24a22",
						"name": "My Proxy 2",
						"context": "my_proxy_2"
					},
					{
						"uuid": "9b4bde91-53e4-411a-9449-5b33afc41c19",
						"name": "My Proxy 3",
						"context": "my_proxy_3"
					}
				]
			}
		}
	],
	"totalPages": 1,
	"totalItems": 3,
	"pageSize": 30,
	"currentPage": 1,
	"last": true,
	"first": true,
	"sort": "ASC SUBJECT NAME"
}