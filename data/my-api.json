{
	"myApi": {
		"authenticationList": "No Authentication",
		"authorizationList": "No Authorization",
		"authentication": [
			{
				"type": "noAuth",
				"enabled": true,
				"name": "No Authentication",
				"disabled": false,
				"fields": {}
			},
			{
				"type": "basic",
				"enabled": false,
				"name": "Basic Authentication",
				"disabled": false,
				"fields": {}
			},
			{
				"type": "apiKey",
				"enabled": false,
				"name": "API Key Authorization",
				"disabled": false,
				"fields": {
					"provider": "Verapi Key",
					"verapiName": "string",
					"verapiType": "verapiKey"
				}
			},
			{
				"type": "oAuth",
				"enabled": false,
				"name": "oAuth 2.0",
				"disabled": false,
				"fields": {}
			},
			{
				"type": "ldap",
				"enabled": false,
				"name": "LDAP Authentication",
				"disabled": true,
				"fields": {}
			},
			{
				"type": "saml",
				"enabled": false,
				"name": "SAML Authentication",
				"disabled": true,
				"fields": {}
			}
		],
		"authorization": [
			{
				"type": "noAuthz",
				"enabled": true,
				"name": "No Authorization",
				"disabled": false,
				"fields": {}
			},
			{
				"type": "apiKey",
				"enabled": false,
				"name": "API Key Authorization",
				"disabled": false,
				"fields": {}
			}
		],
		"methods": [
			{
				"uuid": "c20e962a-3901-482a-aaaf-d528b6d92716",
				"created": "2017-09-22T00:00:00.000Z",
				"verb": "GET",
				"resourcePath": "/pet",
				"operationId": "getPet",
				"summary": "Update an existing pet",
				"description": "Pet object that needs to be added to the store",
				"parameters": [
					{
						"uuid": "26d88de9-2b74-4bd6-bf17-d019e751ffe6",
						"created": "2017-05-22T00:00:00.000Z",
						"name": "Param 1",
						"description": "Pet object that needs to be added to the store",
						"dataType": "String",
						"required": true,
						"defaultValue": "default",
						"minLength": "2",
						"maxLength": "10",
						"pattern": "regex"
					},
					{
						"uuid": "aab40dda-b81a-4822-9b3c-460de292b311",
						"name": "Param 2",
						"description": "Pet object that needs to be added to the store",
						"dataType": "String",
						"required": true,
						"defaultValue": "default",
						"minLength": "2",
						"maxLength": "10",
						"pattern": "regex"
					}
				],
				"headers": [
					{
						"uuid": "06883eb6-3dfa-4ac5-aeff-540a21b57d06",
						"created": "2017-05-22T00:00:00.000Z",
						"name": "Header 1",
						"description": "Pet object that needs to be added to the store",
						"dataType": "String",
						"required": true,
						"defaultValue": "default",
						"minLength": "2",
						"maxLength": "10",
						"pattern": "regex"
					}
				]
			},
			{
				"uuid": "5a3f114b-0273-409c-bfa2-afd0c7dfdec7",
				"created": "2017-05-22T00:00:00.000Z",
				"verb": "POST",
				"resourcePath": "/pet/{petId}",
				"operationId": "getPet",
				"summary": "Updates a pet in the store with form data",
				"description": "Pet object that needs to be added to the store",
				"parameters": [
					{
						"uuid": "83b90daa-db71-4fea-88e2-1ae7936982fa",
						"created": "2017-05-22T00:00:00.000Z",
						"name": "Param 1",
						"description": "Pet object that needs to be added to the store",
						"dataType": "String",
						"required": true,
						"defaultValue": "default",
						"minLength": "2",
						"maxLength": "10",
						"pattern": "regex"
					}
				],
				"headers": [
					{
						"uuid": "00c1f480-deb0-4fca-bf76-b9359ec7eac2",
						"created": "2017-05-22T00:00:00.000Z",
						"name": "Header 1",
						"description": "Pet object that needs to be added to the store",
						"dataType": "String",
						"required": true,
						"defaultValue": "default",
						"minLength": "2",
						"maxLength": "10",
						"pattern": "regex"
					}
				]
			},
			{
				"uuid": "9da5c336-a1c2-40d3-ba51-c75cccfc45bb",
				"created": "2017-05-22T00:00:00.000Z",
				"verb": "PUT",
				"resourcePath": "/pet",
				"operationId": "getPet",
				"summary": "Update an existing pet",
				"description": "Pet object that needs to be added to the store",
				"parameters": [],
				"headers": []
			},
			{
				"uuid": "e67f0a95-f03e-4516-8d22-8e6b798bcff4",
				"created": "2017-05-22T00:00:00.000Z",
				"verb": "DELETE",
				"resourcePath": "/pet",
				"operationId": "getPet",
				"summary": "Update an existing pet",
				"description": "Pet object that needs to be added to the store",
				"parameters": [
					{
						"uuid": "b9e2217f-a7d8-4612-a21b-09e702bf56f4",
						"created": "2017-05-22T00:00:00.000Z",
						"name": "Param 1",
						"description": "Pet object that needs to be added to the store",
						"dataType": "String",
						"required": true,
						"defaultValue": "default",
						"minLength": "2",
						"maxLength": "10",
						"pattern": "regex"
					}
				],
				"headers": [
					{
						"uuid": "f0ac1e9b-f1e4-435b-9f8f-b39f4b4cae52",
						"created": "2017-05-22T00:00:00.000Z",
						"name": "Header 1",
						"description": "Pet object that needs to be added to the store",
						"dataType": "String",
						"required": true,
						"defaultValue": "default",
						"minLength": "2",
						"maxLength": "10",
						"pattern": "regex"
					}
				]
			}
		],
		"openapi": "3.0.0-RC1",
		"servers": [
			{
				"url": "https://development.gigantic-server.com/v1",
				"description": "Development server"
			},
			{
				"url": "https://staging.gigantic-server.com/v1",
				"description": "Staging server"
			},
			{
				"url": "https://api.gigantic-server.com/v1",
				"description": "Production server",
				"variables": {
					"username": {
						"description": "this value is assigned by the service provider, in this example `gigantic-server.com`",
						"default": "demo"
					},
					"port": {
						"enum": ["8443", "443"],
						"default": "8443"
					},
					"basePath": {
						"default": "v2"
					}
				}
			}
		],
		"info": {
			"title": "Swagger Petstoreee",
			"version": "1.0.0",
			"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
			"termsOfService": "http://swagger.io/terms/",
			"contact": {
				"name": "API Support",
				"url": "http://www.example.com/support",
				"email": "support@example.com",
				"x-phone": "+905559998877"
			},
			"license": {
				"name": "Apache 2.0",
				"url": "http://www.apache.org/licenses/LICENSE-2.0.html",
				"x-docs": ""
			}
		},
		"tags": [
			{
				"name": "pet",
				"description": "Everything about your Pets",
				"externalDocs": {
					"url": "http://swagger.io",
					"description": "Find out more"
				}
			},
			{
				"name": "store",
				"description": "Access to Petstore orders"
			},
			{
				"name": "user",
				"description": "Operations about user",
				"externalDocs": {
					"url": "http://swagger.io",
					"description": "Find out more about our store"
				}
			}
		],
		"externalDocs": {
			"url": "http://swagger.io",
			"description": "Find out more about Swagger"
		},
		"components": {
			"headers": {},
			"schemas": {
				"Pet": {
					"xml": {
						"name": "Pet"
					},
					"type": "object",
					"required": ["name", "photoUrls"],
					"properties": {
						"id": {
							"type": "integer",
							"format": "int64"
						},
						"name": {
							"type": "string",
							"example": "doggie"
						},
						"tags": {
							"xml": {
								"name": "tag",
								"wrapped": true
							},
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/Tag"
							}
						},
						"status": {
							"enum": ["available", "pending", "sold"],
							"type": "string",
							"description": "pet status in the store"
						},
						"category": {
							"$ref": "#/components/schemas/Category"
						},
						"photoUrls": {
							"xml": {
								"name": "photoUrl",
								"wrapped": true
							},
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"Tag": {
					"xml": {
						"name": "Tag"
					},
					"type": "object",
					"properties": {
						"id": {
							"type": "integer",
							"format": "int64"
						},
						"name": {
							"type": "string"
						}
					}
				},
				"User": {
					"xml": {
						"name": "User"
					},
					"type": "object",
					"properties": {
						"id": {
							"type": "integer",
							"format": "int64"
						},
						"email": {
							"type": "string"
						},
						"phone": {
							"type": "string"
						},
						"lastName": {
							"type": "string"
						},
						"password": {
							"type": "string"
						},
						"username": {
							"type": "string"
						},
						"firstName": {
							"type": "string"
						},
						"userStatus": {
							"type": "integer",
							"format": "int32",
							"description": "User Status"
						}
					}
				},
				"Order": {
					"xml": {
						"name": "Order"
					},
					"type": "object",
					"properties": {
						"id": {
							"type": "integer",
							"format": "int64"
						},
						"petId": {
							"type": "integer",
							"format": "int64"
						},
						"status": {
							"enum": ["placed", "approved", "delivered"],
							"type": "string",
							"description": "Order Status"
						},
						"complete": {
							"type": "boolean",
							"default": false
						},
						"quantity": {
							"type": "integer",
							"format": "int32"
						},
						"shipDate": {
							"type": "string",
							"format": "date-time"
						}
					}
				},
				"Category": {
					"xml": {
						"name": "Category"
					},
					"type": "object",
					"properties": {
						"id": {
							"type": "integer",
							"format": "int64"
						},
						"name": {
							"type": "string"
						}
					}
				},
				"ApiResponse": {
					"type": "object",
					"properties": {
						"code": {
							"type": "integer",
							"format": "int32"
						},
						"type": {
							"type": "string"
						},
						"message": {
							"type": "string"
						}
					}
				}
			},
			"examples": {},
			"responses": {},
			"parameters": {},
			"links": {},
			"callbacks": {},
			"requestBodies": {
				"Pet": {
					"content": {
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/Pet"
							}
						},
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Pet"
							}
						}
					},
					"description": "Pet object that needs to be added to the store"
				},
				"UserArray": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"description": "List of user object"
				}
			},
			"securitySchemes": {
				"api_key": {
					"type": "apiKey",
					"name": "api_key",
					"in": "header"
				},
				"cookieAuth": {
					"type": "apiKey",
					"in": "cookie",
					"name": "JSESSIONID"
				},
				"basicAuth": {
					"type": "http",
					"scheme": "basic",
					"x-username": "",
					"x-password": ""
				},
				"bearerAuth": {
					"type": "http",
					"scheme": "bearer",
					"bearerFormat": "JSONWebToken"
				},
				"openId": {
					"type": "openIdConnect",
					"openIdConnectUrl": "https://example.com/.well-known/openid-configuration"
				},
				"petstore_auth": {"type": "oauth2",
					"flows": {
						"implicit": {
							"scopes": {
								"read:pets": "read your pets",
								"write:pets": "modify pets in your account"
							},
							"authorizationUrl": "http://petstore.swagger.io/oauth/dialog"
						}
					}
				}
			}
		},
		"paths": {
			"/pet": {
				"post": {
					"tags": ["pet"],
					"summary": "Add a new pet to the store",
					"description": "",
					"externalDocs": {
						"url": "http://swagger.io",
						"description": "Find out more about Swagger"
					},
					"operationId": "addPet",
					"parameters": [],
					"requestBody": {
						"$ref": "#/components/requestBodies/Pet"
					},
					"responses": {
						"405": {
							"description": "Invalid input"
						}
					},
					"callbacks": {},
					"security": [
						{
							"petstore_auth": ["write:pets", "read:pets"]
						}
					]
				},
				"put": {
					"tags": ["pet"],
					"summary": "Update an existing pet",
					"security": [
						{
							"petstore_auth": ["write:pets", "read:pets"]
						}
					],
					"responses": {
						"400": {
							"description": "Invalid ID supplied"
						},
						"404": {
							"description": "Pet not found"
						},
						"405": {
							"description": "Validation exception"
						}
					},
					"parameters": [],
					"description": "",
					"operationId": "updatePet",
					"requestBody": {
						"$ref": "#/components/requestBodies/Pet"
					}
				}
			},
			"/pet/findByStatus": {
				"get": {
					"tags": ["pet"],
					"summary": "Finds Pets by status",
					"security": [
						{
							"petstore_auth": ["write:pets", "read:pets"]
						}
					],
					"responses": {
						"200": {
							"content": {
								"application/xml": {
									"schema": {
										"type": "array",
										"items": {
											"$ref": "#/components/schemas/Pet"
										}
									}
								},
								"application/json": {
									"schema": {
										"type": "array",
										"items": {
											"$ref": "#/components/schemas/Pet"
										}
									}
								}
							},
							"description": "successful operation"
						},
						"400": {
							"description": "Invalid status value"
						}
					},
					"parameters": [
						{
							"in": "query",
							"name": "status",
							"schema": {
								"type": "array",
								"items": {
									"enum": ["available",
									"pending",
									"sold"],
									"type": "string",
									"default": "available"
								}
							},
							"explode": true,
							"required": true,
							"description": "Status values that need to be considered for filter"
						}
					],
					"description": "Multiple status values can be provided with comma separated strings",
					"operationId": "findPetsByStatus"
				}
			},
			"/pet/findByTags": {
				"get": {
					"tags": ["pet"],
					"summary": "Finds Pets by tags",
					"security": [
						{
							"petstore_auth": ["write:pets", "read:pets"]
						}
					],
					"responses": {
						"200": {
							"content": {
								"application/xml": {
									"schema": {
										"type": "array",
										"items": {
											"$ref": "#/components/schemas/Pet"
										}
									}
								},
								"application/json": {
									"schema": {
										"type": "array",
										"items": {
											"$ref": "#/components/schemas/Pet"
										}
									}
								}
							},
							"description": "successful operation"
						},
						"400": {
							"description": "Invalid tag value"
						}
					},
					"deprecated": true,
					"parameters": [
						{
							"in": "query",
							"name": "tags",
							"schema": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"explode": true,
							"required": true,
							"description": "Tags to filter by"
						}
					],
					"description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
					"operationId": "findPetsByTags"
				}
			},
			"/pet/{petId}": {
				"get": {
					"tags": ["pet"],
					"summary": "Find pet by ID",
					"security": [
						{
							"api_key": []
						}
					],
					"responses": {
						"200": {
							"content": {
								"application/xml": {
									"schema": {
										"$ref": "#/components/schemas/Pet"
									}
								},
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/Pet"
									}
								}
							},
							"description": "successful operation"
						},
						"400": {
							"description": "Invalid ID supplied"
						},
						"404": {
							"description": "Pet not found"
						}
					},
					"parameters": [
						{
						"in": "path",
						"name": "petId",
						"schema": {
							"type": "integer",
							"format": "int64"
						},
						"required": true,
						"description": "ID of pet to return"
						}
					],
					"description": "Returns a single pet",
					"operationId": "getPetById"
				},
				"post": {
					"tags": ["pet"],
					"summary": "Updates a pet in the store with form data",
					"security": [
						{
						"petstore_auth": ["write:pets", "read:pets"]
						}
					],
					"responses": {
						"405": {
							"description": "Invalid input"
						}
					},
					"parameters": [
						{
						"in": "path",
						"name": "petId",
						"schema": {
							"type": "integer",
							"format": "int64"
						},
						"required": true,
						"description": "ID of pet that needs to be updated"
						}
					],
					"description": "",
					"operationId": "updatePetWithForm",
					"requestBody": {
						"content": {
							"application/x-www-form-urlencoded": {
								"schema": {
									"type": "object",
									"properties": {
										"name": {
											"type": "string"
										},
										"status": {
											"type": "string"
										}
									}
								}
							}
						},
						"description": "Updated name of the pet"
					}
				},
				"delete": {
					"tags": ["pet"],
					"summary": "Deletes a pet",
					"security": [
						{
							"petstore_auth": ["write:pets", "read:pets"]
						}
					],
					"responses": {
						"400": {
							"description": "Invalid ID supplied"
						},
						"404": {
							"description": "Pet not found"
						}
					},
					"parameters": [
						{
						"in": "header",
						"name": "api_key",
						"schema": {
							"type": "string"
						},
						"required": false
					},
					{
						"in": "path",
						"name": "petId",
						"schema": {
							"type": "integer",
							"format": "int64"
						},
						"required": true,
						"description": "Pet id to delete"
						}
					],
					"description": "",
					"operationId": "deletePet"
				}
			},
			"/pet/{petId}/uploadImage": {
				"post": {
					"tags": ["pet"],
					"summary": "uploads an image",
					"security": [
						{
							"petstore_auth": ["write:pets", "read:pets"]
						}
					],
					"responses": {
						"200": {
							"content": {
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/ApiResponse"
									}
								}
							},
							"description": "successful operation"
						}
					},
					"parameters": [
						{
							"in": "path",
							"name": "petId",
							"schema": {
								"type": "integer",
								"format": "int64"
							},
							"required": true,
							"description": "ID of pet to update"
						}
					],
					"description": "",
					"operationId": "uploadFile",
					"requestBody": {
						"content": {
							"application/octet-stream": {
								"schema": {
									"type": "string",
									"format": "binary"
								}
							}
						},
						"description": "file to upload"
					}
				}
			},
			"/store/inventory": {
				"get": {
					"tags": ["store"],
					"summary": "Returns pet inventories by status",
					"security": [
						{
							"api_key": []
						}
					],
					"responses": {
						"200": {
							"content": {
								"application/json": {
									"schema": {
										"type": "object",
										"additionalProperties": {
											"type": "integer",
											"format": "int32"
										}
									}
								}
							},
							"description": "successful operation"
						}
					},
					"parameters": [],
					"description": "Returns a map of status codes to quantities",
					"operationId": "getInventory"
				}
			},
			"/store/order": {
				"post": {
					"tags": ["store"],
					"summary": "Place an order for a pet",
					"responses": {
						"200": {
							"content": {
								"application/xml": {
									"schema": {
										"$ref": "#/components/schemas/Order"
									}
								},
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/Order"
									}
								}
							},
							"description": "successful operation"
						},
						"400": {
							"description": "Invalid Order"
						}
					},
					"parameters": [],
					"description": "",
					"operationId": "placeOrder",
					"requestBody": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Order"
								}
							}
						},
						"description": "order placed for purchasing the pet"
					}
				}
			},
			"/store/order/{orderId}": {
				"get": {
					"tags": ["store"],
					"summary": "Find purchase order by ID",
					"responses": {
						"200": {
							"content": {
								"application/xml": {
									"schema": {
										"$ref": "#/components/schemas/Order"
									}
								},
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/Order"
									}
								}
							},
							"description": "successful operation"
						},
						"400": {
							"description": "Invalid ID supplied"
						},
						"404": {
							"description": "Order not found"
						}
					},
					"parameters": [
						{
							"in": "path",
							"name": "orderId",
							"schema": {
								"type": "integer",
								"format": "int64",
								"maximum": 10,
								"minimum": 1
							},
							"required": true,
							"description": "ID of pet that needs to be fetched"
						}
					],
					"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
					"operationId": "getOrderById"
				},
				"delete": {
					"tags": ["store"],
					"summary": "Delete purchase order by ID",
					"responses": {
						"400": {
							"description": "Invalid ID supplied"
						},
						"404": {
							"description": "Order not found"
						}
					},
					"parameters": [
						{
							"in": "path",
							"name": "orderId",
							"schema": {
								"type": "integer",
								"format": "int64",
								"minimum": 1
							},
							"required": true,
							"description": "ID of the order that needs to be deleted"
						}
					],
					"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
					"operationId": "deleteOrder"
				}
			},
			"/user": {
				"post": {
					"tags": ["user"],
					"summary": "Create user",
					"responses": {
						"default": {
							"description": "successful operation"
						}
					},
					"parameters": [],
					"description": "This can only be done by the logged in user.",
					"operationId": "createUser",
					"requestBody": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						},
						"description": "Created user object"
					}
				}
			},
			"/user/createWithArray": {
				"post": {
					"tags": ["user"],
					"summary": "Creates list of users with given input array",
					"responses": {
						"default": {
							"description": "successful operation"
						}
					},
					"parameters": [],
					"description": "",
					"operationId": "createUsersWithArrayInput",
					"requestBody": {
						"$ref": "#/components/requestBodies/UserArray"
					}
				}
			},
			"/user/createWithList": {
				"post": {
					"tags": ["user"],
					"summary": "Creates list of users with given input array",
					"responses": {
						"default": {
							"description": "successful operation"
						}
					},
					"parameters": [],
					"description": "",
					"operationId": "createUsersWithListInput",
					"requestBody": {
						"$ref": "#/components/requestBodies/UserArray"
					}
				}
			},
			"/user/login": {
				"get": {
					"tags": ["user"],
					"summary": "Logs user into the system",
					"responses": {
						"200": {
							"content": {
								"application/xml": {
									"schema": {
										"type": "string"
									}
								},
								"application/json": {
									"schema": {
										"type": "string"
									}
								}
							},
							"headers": {
								"X-Rate-Limit": {
									"schema": {
										"type": "integer",
										"format": "int32"
									},
									"description": "calls per hour allowed by the user"
								},
								"X-Expires-After": {
									"schema": {
										"type": "string",
										"format": "date-time"
									},
									"description": "date in UTC when token expires"
								}
							},
							"description": "successful operation"
						},
						"400": {
							"description": "Invalid username/password supplied"
						}
					},
					"parameters": [
						{
						"in": "query",
						"name": "username",
						"schema": {
							"type": "string"
						},
						"required": true,
						"description": "The user name for login"
						},
						{
						"in": "query",
						"name": "password",
						"schema": {
							"type": "string"
						},
						"required": true,
						"description": "The password for login in clear text"
						}
					],
					"description": "",
					"operationId": "loginUser"
				}
			},
			"/user/logout": {
				"get": {
					"tags": ["user"],
					"summary": "Logs out current logged in user session",
					"responses": {
						"default": {
							"description": "successful operation"
						}
					},
					"parameters": [],
					"description": "",
					"operationId": "logoutUser"
				}
			},
			"/user/{username}": {
				"get": {
					"tags": ["user"],
					"summary": "Get user by user name",
					"responses": {
						"200": {
							"content": {
								"application/xml": {
									"schema": {
										"$ref": "#/components/schemas/User"
									}
								},
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/User"
									}
								}
							},
							"description": "successful operation"
						},
						"400": {
							"description": "Invalid username supplied"
						},
						"404": {
							"description": "User not found"
						}
					},
					"parameters": [
						{
							"in": "path",
							"name": "username",
							"schema": {
								"type": "string"
							},
							"required": true,
							"description": "The name that needs to be fetched. Use user1 for testing. "
						}
					],
					"description": "",
					"operationId": "getUserByName"
				},
				"put": {
					"tags": ["user"],
					"summary": "Updated user",
					"responses": {
						"400": {
							"description": "Invalid user supplied"
						},
						"404": {
							"description": "User not found"
						}
					},
					"parameters": [
						{
							"in": "path",
							"name": "username",
							"schema": {
								"type": "string"
							},
							"required": true,
							"description": "name that need to be updated"
						}
					],
					"description": "This can only be done by the logged in user.",
					"operationId": "updateUser",
					"requestBody": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						},
						"description": "Updated user object"
					}
				},
				"delete": {
					"tags": ["user"],
					"summary": "Delete user",
					"responses": {
						"400": {
							"description": "Invalid username supplied"
						},
						"404": {
							"description": "User not found"
						}
					},
					"parameters": [
						{
							"in": "path",
							"name": "username",
							"schema": {
								"type": "string"
							},
							"required": true,
							"description": "The name that needs to be deleted"
						}
					],
					"description": "This can only be done by the logged in user.",
					"operationId": "deleteUser"
				}
			}
		},
		"x-origin": [
			{
				"url": "http://petstore.swagger.io/v2/swagger.json",
				"format": "swagger",
				"version": "2.0",
				"converter": {
					"url": "https://github.com/mermade/swagger2openapi",
					"version": "2.2.0"
				}
			}
		],
		"x-abyss-platform": {
			"uuid": "6d41aeef-a4e5-4b76-a1e5-dcd8fcdc35c4",
			"organization_id": 0,
			"created": "2018-05-02T13:01:39.082502",
			"updated": "2018-05-02T13:01:39.082502",
			"deleted": null,
			"isdeleted": 0,
			"crud_subject_id": 1,
			"subject_id": 501,
			"isproxyapi": false,
			"apistateid": 4,
			"apivisibilityid": 1,
			"languagename": "OpenAPI",
			"languageversion": "3.0",
			"dataformat": 0,
			"businessapiid": null,
			"image": "/uploads/thumb.png",
			"color": "#006699",
			"deployed": null,
			"changelog": null,
			"tags": null,
			"tagss": [
				{
					"uuid": "551f213c-0b28-46ec-96f9-4d799a7a37d0",
					"name": "A Tag"
				},
				{
					"uuid": "5b9f602a-a43c-45da-a990-7078ed7072c3",
					"name": "B Tag"
				},
				{
					"uuid": "efb48e30-c7cc-4909-b4c3-5c5e14562400",
					"name": "C Tag"
				}
			],
			"groups": [
				{
					"uuid": "cc4e71a2-c8ab-4e9e-b0fa-6721ec454da1",
					"name": "A Group"
				},
				{
					"uuid": "874bf24c-d445-4965-bead-ac450f1f2e82",
					"name": "B Group"
				},
				{
					"uuid": "24f454b3-3177-46b9-aa42-148d4c4184dc",
					"name": "C Group"
				}
			],
			"categories": [
				{
					"uuid": "5fa4705d-3445-429b-ba35-cdbfef086033",
					"name": "A Category"
				},
				{
					"uuid": "e389b45e-fb47-4eba-843f-bc1d9b0cffa7",
					"name": "B Category"
				},
				{
					"uuid": "e62158e1-895b-415d-a1ba-e24c595f1d9e",
					"name": "C Category"
				}
			],
			"proxies_summary": [
				{
					"uuid": "65bd3e20-ff9c-4570-87c2-61e5447f3d5d",
					"name": "My Proxy 1",
					"context": "my_proxy_1"
				},
				{
					"uuid": "9b2858f0-6963-4d7c-91d7-e1e64ac24a22",
					"name": "My Proxy 2",
					"context": "my_proxy_2"
				},
				{
					"uuid": "9b4bde91-53e4-411a-9449-5b33afc41c19",
					"name": "My Proxy 3",
					"context": "my_proxy_3"
				}
			]
		}
	}

}